diff --git a/crypto/cipher_extra/cipher_extra.c b/crypto/cipher_extra/cipher_extra.c
index fc8e24b65c4c6f379072f3756703d318747e9526..106f3a9103333e1cc6a2eff6666e980e5607248c 100644
--- a/crypto/cipher_extra/cipher_extra.c
+++ b/crypto/cipher_extra/cipher_extra.c
@@ -83,6 +83,8 @@ const EVP_CIPHER *EVP_get_cipherbynid(int nid) {
       return EVP_aes_192_cbc();
     case NID_aes_256_cbc:
       return EVP_aes_256_cbc();
+    case  NID_aes_256_gcm:
+      return EVP_aes_256_gcm();
     default:
       return NULL;
   }
@@ -108,6 +110,8 @@ const EVP_CIPHER *EVP_get_cipherbyname(const char *name) {
     return EVP_aes_128_ecb();
   } else if (OPENSSL_strcasecmp(name, "aes-256-ecb") == 0) {
     return EVP_aes_256_ecb();
+  } else if (OPENSSL_strcasecmp(name, "aes-256-gcm") == 0) {
+    return EVP_aes_256_gcm();
   }
 
   return NULL;
diff --git a/crypto/digest_extra/digest_extra.c b/crypto/digest_extra/digest_extra.c
index b18759afb0cd0aa5a01fdabc8b73233b6df149b1..1dc230da4ad178478eb62c30ff67642a439259ce 100644
--- a/crypto/digest_extra/digest_extra.c
+++ b/crypto/digest_extra/digest_extra.c
@@ -82,6 +82,9 @@ static const struct nid_to_digest nid_to_digest_mapping[] = {
     {NID_sha384, EVP_sha384, SN_sha384, LN_sha384},
     {NID_sha512, EVP_sha512, SN_sha512, LN_sha512},
     {NID_md5_sha1, EVP_md5_sha1, SN_md5_sha1, LN_md5_sha1},
+    {NID_ripemd160, EVP_ripemd160, SN_ripemd160, LN_ripemd160},
+    {NID_ripemd160, EVP_ripemd160, SN_ripemd, LN_ripemd},
+    {NID_ripemd160, EVP_ripemd160, SN_rmd160, LN_rmd160},
     /* As a remnant of signing |EVP_MD|s, OpenSSL returned the corresponding
      * hash function when given a signature OID. To avoid unintended lax parsing
      * of hash OIDs, this is no longer supported for lookup by OID or NID.
@@ -100,6 +103,7 @@ static const struct nid_to_digest nid_to_digest_mapping[] = {
      LN_sha384WithRSAEncryption},
     {NID_undef, EVP_sha512, SN_sha512WithRSAEncryption,
      LN_sha512WithRSAEncryption},
+    {NID_undef, EVP_ripemd160, SN_ripemd160WithRSA, LN_ripemd160WithRSA},
 };
 
 const EVP_MD* EVP_get_digestbynid(int nid) {
diff --git a/decrepit/evp/evp_do_all.c b/decrepit/evp/evp_do_all.c
index 621c0b11701ffb0a61c5a8ae7585f96289b20438..43983f2a1ebb8fc8e6650be5f7ebcdc5d7a9139e 100644
--- a/decrepit/evp/evp_do_all.c
+++ b/decrepit/evp/evp_do_all.c
@@ -26,6 +26,7 @@ void EVP_CIPHER_do_all_sorted(void (*callback)(const EVP_CIPHER *cipher,
   callback(EVP_aes_256_cbc(), "AES-256-CBC", NULL, arg);
   callback(EVP_aes_256_ctr(), "AES-256-CTR", NULL, arg);
   callback(EVP_aes_256_ecb(), "AES-256-ECB", NULL, arg);
+  callback(EVP_aes_256_gcm(), "AES-256-GCM", NULL, arg);
   callback(EVP_aes_256_ofb(), "AES-256-OFB", NULL, arg);
   callback(EVP_aes_256_xts(), "AES-256-XTS", NULL, arg);
   callback(EVP_des_cbc(), "DES-CBC", NULL, arg);
@@ -44,6 +45,7 @@ void EVP_CIPHER_do_all_sorted(void (*callback)(const EVP_CIPHER *cipher,
   callback(EVP_aes_256_cbc(), "aes-256-cbc", NULL, arg);
   callback(EVP_aes_256_ctr(), "aes-256-ctr", NULL, arg);
   callback(EVP_aes_256_ecb(), "aes-256-ecb", NULL, arg);
+  callback(EVP_aes_256_gcm(), "aes-256-gcm", NULL, arg);
   callback(EVP_aes_256_ofb(), "aes-256-ofb", NULL, arg);
   callback(EVP_aes_256_xts(), "aes-256-xts", NULL, arg);
   callback(EVP_des_cbc(), "des-cbc", NULL, arg);
@@ -61,6 +63,7 @@ void EVP_MD_do_all_sorted(void (*callback)(const EVP_MD *cipher,
                           void *arg) {
   callback(EVP_md4(), "MD4", NULL, arg);
   callback(EVP_md5(), "MD5", NULL, arg);
+  callback(EVP_ripemd160(), "RIPEMD160", NULL, arg);
   callback(EVP_sha1(), "SHA1", NULL, arg);
   callback(EVP_sha224(), "SHA224", NULL, arg);
   callback(EVP_sha256(), "SHA256", NULL, arg);
@@ -69,6 +72,7 @@ void EVP_MD_do_all_sorted(void (*callback)(const EVP_MD *cipher,
 
   callback(EVP_md4(), "md4", NULL, arg);
   callback(EVP_md5(), "md5", NULL, arg);
+  callback(EVP_ripemd160(), "ripemd160", NULL, arg);
   callback(EVP_sha1(), "sha1", NULL, arg);
   callback(EVP_sha224(), "sha224", NULL, arg);
   callback(EVP_sha256(), "sha256", NULL, arg);
diff --git a/decrepit/ripemd/ripemd.c b/decrepit/ripemd/ripemd.c
index ab9bc32dfb109a04d6cd7fbdbca424cb590f0b75..2b3e69e080e2eeb4a8a937254d846325ebe91977 100644
--- a/decrepit/ripemd/ripemd.c
+++ b/decrepit/ripemd/ripemd.c
@@ -56,9 +56,13 @@
 
 #include <openssl/ripemd.h>
 
+#include <openssl/digest.h>
+#include <openssl/nid.h>
 #include <string.h>
 
 #include "internal.h"
+#include "../../crypto/fipsmodule/delocate.h"
+#include "../../crypto/fipsmodule/digest/internal.h"
 
 
 int RIPEMD160_Init(RIPEMD160_CTX *ctx) {
@@ -71,6 +75,38 @@ int RIPEMD160_Init(RIPEMD160_CTX *ctx) {
   return 1;
 }
 
+#if defined(NDEBUG)
+#define CHECK(x) (void) (x)
+#else
+#define CHECK(x) assert(x)
+#endif
+
+static void ripemd160_init(EVP_MD_CTX *ctx)
+{
+    CHECK(RIPEMD160_Init(ctx->md_data));
+}
+
+static void ripemd160_update(EVP_MD_CTX *ctx, const void *data, size_t count)
+{
+    CHECK(RIPEMD160_Update(ctx->md_data, data, count));
+}
+
+static void ripemd160_final(EVP_MD_CTX *ctx, uint8_t *out)
+{
+    CHECK(RIPEMD160_Final(out, ctx->md_data));
+}
+
+DEFINE_METHOD_FUNCTION(EVP_MD, EVP_ripemd160) {
+  out->type = NID_ripemd160;
+  out->md_size = RIPEMD160_DIGEST_LENGTH;
+  out->flags = 0;
+  out->init = ripemd160_init;
+  out->update = ripemd160_update;
+  out->final = ripemd160_final;
+  out->block_size = RIPEMD160_CBLOCK;
+  out->ctx_size = sizeof(RIPEMD160_CTX);
+}
+
 static void ripemd160_block_data_order(uint32_t h[5], const uint8_t *data,
                                        size_t num) {
   uint32_t A, B, C, D, E;
@@ -311,7 +347,7 @@ static void ripemd160_block_data_order(uint32_t h[5], const uint8_t *data,
 #undef X
 }
 
-uint8_t *RIPEMD160(const uint8_t *data, size_t len, unsigned char *out) {
+uint8_t *RIPEMD160(const uint8_t *data, size_t len, uint8_t *out) {
   RIPEMD160_CTX ctx;
 
   if (!RIPEMD160_Init(&ctx)) {
diff --git a/include/openssl/digest.h b/include/openssl/digest.h
index 2de84f7d5dab71cf709fbf770308a2b691232b2e..435e92322108724617b52f6766052a691caf3bf3 100644
--- a/include/openssl/digest.h
+++ b/include/openssl/digest.h
@@ -83,6 +83,7 @@ OPENSSL_EXPORT const EVP_MD *EVP_sha224(void);
 OPENSSL_EXPORT const EVP_MD *EVP_sha256(void);
 OPENSSL_EXPORT const EVP_MD *EVP_sha384(void);
 OPENSSL_EXPORT const EVP_MD *EVP_sha512(void);
+OPENSSL_EXPORT const EVP_MD *EVP_ripemd160(void);
 
 /* EVP_md5_sha1 is a TLS-specific |EVP_MD| which computes the concatenation of
  * MD5 and SHA-1, as used in TLS 1.1 and below. */
diff --git a/include/openssl/nid.h b/include/openssl/nid.h
index bc0ee3388b12872a8bef6ae32984f83103075262..65982232c85fa2f94fd4a1213c1f3a790089e59f 100644
--- a/include/openssl/nid.h
+++ b/include/openssl/nid.h
@@ -617,6 +617,12 @@ extern "C" {
 #define NID_ripemd160 117
 #define OBJ_ripemd160 1L, 3L, 36L, 3L, 2L, 1L
 
+#define SN_ripemd "RIPEMD"
+#define LN_ripemd "ripemd"
+
+#define SN_rmd160 "RMD160"
+#define LN_rmd160 "rmd160"
+
 #define SN_ripemd160WithRSA "RSA-RIPEMD160"
 #define LN_ripemd160WithRSA "ripemd160WithRSA"
 #define NID_ripemd160WithRSA 119
diff --git a/util/BUILD.toplevel b/util/BUILD.toplevel
index 68a17a604383f93e9d5722c71d0883838a5e24af..22ca47ae5dc5786d23dd4b2f00a33ab2d4c6099e 100644
--- a/util/BUILD.toplevel
+++ b/util/BUILD.toplevel
@@ -30,6 +30,7 @@ load(
     "ssl_cc_sources",
     "tool_sources",
     "tool_headers",
+    "decrepit_sources",
 )
 
 config_setting(
@@ -122,6 +123,15 @@ cc_library(
     deps = [":crypto"],
 )
 
+cc_library(
+    name = "decrepit",
+    srcs = decrepit_sources,
+    copts = boringssl_copts_c11,
+    includes = ["src/include"],
+    visibility = ["//visibility:public"],
+    deps = [":crypto"],
+)
+
 cc_binary(
     name = "bssl",
     srcs = tool_sources + tool_headers,
diff --git a/util/generate_build_files.py b/util/generate_build_files.py
index 38d757be069752b71857f60f0cdedccd61b21bf3..1fab90faac1aebdbab31ab4f1b89e6f877b968ac 100644
--- a/util/generate_build_files.py
+++ b/util/generate_build_files.py
@@ -172,6 +172,14 @@ class Android(object):
       blueprint.write('    ],\n')
       blueprint.write('}\n')
 
+      blueprint.write('cc_defaults {\n')
+      blueprint.write('    name: "libdecrepit_sources",\n')
+      blueprint.write('    srcs: [\n')
+      for f in sorted(files['decrepit']):
+        blueprint.write('        "%s",\n' % f)
+      blueprint.write('    ],\n')
+      blueprint.write('}\n\n')
+
     # Legacy Android.mk format, only used by Trusty in new branches
     with open('sources.mk', 'w+') as makefile:
       makefile.write(self.header)
@@ -222,6 +230,7 @@ class Bazel(object):
       self.PrintVariableSection(out, 'crypto_sources', files['crypto'])
       self.PrintVariableSection(out, 'tool_sources', files['tool'])
       self.PrintVariableSection(out, 'tool_headers', files['tool_headers'])
+      self.PrintVariableSection(out, 'decrepit_sources', files['decrepit'])
 
       for ((osname, arch), asm_files) in asm_outputs:
         self.PrintVariableSection(
@@ -352,6 +361,8 @@ class GN(object):
       self.PrintVariableSection(out, 'ssl_sources',
                                 files['ssl'] + files['ssl_headers'] +
                                 files['ssl_internal_headers'])
+      self.PrintVariableSection(out, 'decrepit_sources',
+                                files['decrepit'])
 
       for ((osname, arch), asm_files) in asm_outputs:
         self.PrintVariableSection(
@@ -674,6 +685,21 @@ def main(platforms):
   ssl_source_files = FindCFiles(os.path.join('src', 'ssl'), NoTests)
   tool_c_files = FindCFiles(os.path.join('src', 'tool'), NoTests)
   tool_h_files = FindHeaderFiles(os.path.join('src', 'tool'), AllFiles)
+  decrepit_c_files = (
+      FindCFiles(os.path.join('src', 'decrepit', 'bio'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'bio_ssl'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'blowfish'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'cast'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'des'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'dh'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'dsa'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'evp'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'rc4'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'ripemd'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'rsa'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'ssl'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'x509'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'xts'), NoTests))
 
   # Generate err_data.c
   with open('err_data.c', 'w+') as err_data:
@@ -775,6 +801,7 @@ def main(platforms):
       'ssl_test': sorted(ssl_test_files),
       'tool': tool_c_files,
       'tool_headers': tool_h_files,
+      'decrepit': decrepit_c_files,
       'test': test_c_files,
       'test_support': test_support_c_files,
       'test_support_headers': test_support_h_files,
